---
title: "Mapas e análise exploratória dos dados"
author: "Victor Batista"
format: html
editor: visual
---


# Introdução

Configura pacotes, diretórios e insere os dados


```{r wd, include=FALSE}
dropbox <- "c:/Users/victo/dropbox/DISSERTACAO/"
```

```{r libraries, include=FALSE}
packages <- c("sf",
              "SpatialRDD",
              "tidyverse",
              "stargazer",
              "tmap",
              "rdrobust",
              "rddapp",
              "lfe",
              "geobr",
              "summarytools",
              "kableExtra",
              "gifski",
              "readxl")
lapply(packages, require, character.only = TRUE)
rm(packages)
```

```{r input, include=FALSE}
#source?
border_data <- read_excel(file.path(dropbox,"Base_homicidios.xlsx"))
glimpse(border_data)

```

```{r include=FALSE}
border_data <- border_data |> 
  separate(Município, c("code_muni", "name_muni"), sep = 7) |> 
  separate(code_muni, c("code_muni", NA), sep = -1) |> 
  dplyr::select(-name_muni)
```


# Mapas

## Lê os shapefiles


```{r shapefilefronteira, echo=TRUE, warning=FALSE}
fronteira <- st_read(file.path(dropbox,"Fronteira/Faixa_de_Fronteira_por_UF_2022.shp")) %>%
  st_transform("WGS84")

tm_shape(fronteira, unit = "km")+
  tm_fill(alpha = 0.7) + 
  tm_borders(col = "black")
```


## Uniformiza a faixa de fronteira como uma única região


```{r sflinha, echo=TRUE, warning=FALSE}
linha_fronteira <- fronteira %>%
  mutate(pais = "BR") %>% 
  group_by(pais) %>% 
  summarise()

tm_shape(linha_fronteira, unit = "km")+
  tm_fill(alpha = 0.7) + 
  tm_borders(col = "black")
```


## Carrega sf dos municípios brasileiros


```{r sfmunicipios, echo=TRUE, warning=FALSE}
municipios <- read_municipality(year=2020, showProgress = T) %>%
  st_transform("WGS84")

tm_shape(municipios, unit = "km")+
  tm_fill(alpha = 0.7) + 
  tm_borders(col = "black")
```


## Carrega o sf dos países da América do Sul


```{r sfamerica, echo=TRUE, warning=FALSE}
america <- st_read(file.path(dropbox,"America/South_America.shp")) %>% 
  st_transform("WGS84")

tm_shape(america, unit = "km")+
  tm_fill(alpha = 0.7) + 
  tm_borders(col = "black")
```


## Carrega o sf dos municípios da faixa de fronteira


```{r sfmunicipiosff, echo=TRUE, warning=FALSE}
municipios_fronteira <- st_read(file.path(dropbox,"Municipios_Fronteira/Municipios_Faixa_Fronteira_2022.shp")) %>%
  st_transform("WGS84")

tm_shape(municipios_fronteira, unit = "km")+
  tm_fill(alpha = 0.7) + 
  tm_borders(col = "black")
```


## Novos municípios propostos


```{r}
# Estabelece a nova proposta de faixa de fronteira
linha_fronteira_300km <- st_buffer(linha_fronteira, dist = 150000)

# Verifica municípios que passam a pertencer à região
# Adiciona variável de intercessão
municipios$inter <- st_intersects(municipios, linha_fronteira_300km, sparse = F)
table(municipios$inter)

```


## Faixa de fronteira original


```{r}
# Adiciona variável de pertencimento à fronteira original
municipios <- municipios %>%
  mutate(fronteira = ifelse(code_muni %in% municipios_fronteira$CD_MUN, 1, 0))
table(municipios$fronteira)
```


# Criação de tratamento e controle


```{r}
df <- municipios |>
  #filtra os municípios na nova faixa
  filter(inter == T) |> 
  # cria o grupo de tratamento e controle
  mutate(treated = ifelse(code_muni %in% municipios_fronteira$CD_MUN, 1, 0),
         groups = ifelse(treated == 1, "treatment", "control"),
         # cria os arcos
         arcos = case_when(abbrev_state %in% c("AP", "PA", "AM", "AC", "RR") ~ "Arco Norte",
                           abbrev_state %in% c("RO", "MS", "MT") ~ "Arco Central",
                           abbrev_state %in% c("PR", "SC", "RS") ~ "Arco Sul")) |> 
  # exclui a variável classificatória. as recém criadas a substituem
  dplyr::select(-inter)

glimpse(df)

```

```{r}
# prepara a tabela da fronteira para mergir com a df principal (municipios)
t <- municipios_fronteira |> 
  # remove colunas indesejadas
  select(-c("NM_REGIAO", "CD_UF", "NM_UF", "SIGLA_UF", "NM_MUN", "geometry")) |> 
  # padroniza o nome code_muni
  rename("code_muni" = "CD_MUN") |> 
  # altera o tipo das colunas para numeric e logic
  mutate(code_muni = as.numeric(code_muni),
         CID_GEMEA = ifelse(is.na(CID_GEMEA) == F, 1, 0))

# remove o componente gráfico
st_geometry(t) <- NULL

# realiza o join
df <- dplyr::left_join(df, t, by = "code_muni")
rm(t)

glimpse(df)
```

```{r}
# prepara a tabela da sede dos mun da faixa da fronteira para mergir com a df principal (municipios)
sede_municipios <- st_read(file.path(dropbox,"Sedes_Municipios_Faixa_de_Fronteira_Cidades_Gemeas_2022_shp/Sedes_Municipios_Faixa_de_Fronteira_Cidades_Gemeas_2022.shp")) %>%
  st_transform("WGS84")

t <- sede_municipios %>%
  # seleciona colunas desejadas
  select(c("CD_MUN", "FAIXA_SEDE")) %>%
  # harmoniza os nomes de variáveis
  rename("code_muni" = "CD_MUN") %>%
  # modifica a classe da variável
  mutate(code_muni = as.numeric(code_muni),
         FAIXA_SEDE = ifelse(FAIXA_SEDE == "sim", 1, 0))

# remove a geometria da tabela para realizar o join
st_geometry(t) <- NULL

# realiza o join
df <- dplyr::left_join(df, t, by = "code_muni")
rm(t)

glimpse(df)
```

```{r}
# prepara para juntar demais países da américa do sul na base de municípios
# Remove regiões sem fronteira com o br
america2 <- america %>%
  filter(!(COUNTRY %in% c("Brazil", "Falkland Islands (UK)",
                          "South Georgia and the South Sandwich Is (UK)", "Chile", "Ecuador")))

# verifica interseções
a <- st_intersects(df, america2, sparse = FALSE)

# renomeia colunas e cria variáveis dummy
a <- as.data.frame(a) %>%
  rename("Argentina" = "V1",
         "Bolivia" = "V2",
         "Colombia" = "V3",
         "French_Guiana" = "V4",
         "Guyana" = "V5",
         "Suriname" = "V6",
         "Paraguay" = "V7",
         "Peru" = "V8",
         "Uruguay" = "V9",
         "Venezuela" = "V10") %>%
  mutate(Argentina = ifelse(Argentina == T, 1, 0),
         Bolivia = ifelse(Bolivia == T, 1, 0),
         Colombia = ifelse(Colombia == T, 1, 0),
         French_Guiana = ifelse(French_Guiana == T, 1, 0),
         Guyana = ifelse(Guyana == T, 1, 0),
         Suriname = ifelse(Suriname == T, 1, 0),
         Paraguay = ifelse(Paraguay == T, 1, 0),
         Peru = ifelse(Peru == T, 1, 0),
         Uruguay = ifelse(Uruguay == T, 1, 0),
         Venezuela = ifelse(Venezuela == T, 1, 0))

df <- cbind(df, a)
rm(a)

glimpse(df)

```


# Mapas

## Mapa por grupos


```{r}
tm_shape(df) + tm_polygons(col = "groups")
```


## Mapa por arcos


```{r}
tm_shape(df) + tm_polygons(col = "arcos")
```


# Análise exploratória


```{r}
base_homicidios <- read_excel(file.path(dropbox, "Base_homicidios.xlsx"))
base_homicidios <- base_homicidios %>%
  separate(Município, c("code_muni", "name_muni"), sep = 7) %>%
  separate(code_muni, c("code_muni", NA), sep = -1) %>%
  select(-name_muni)

base_homicidios

```

```{r}
# separar em dois, porque o tidyverse não funciona bem com arquivos espaciais
df_rdd <- df %>%
  separate(code_muni, c("code_muni", NA), sep = -1)

df_rdd <- left_join(df_rdd, base_homicidios, by = "code_muni") %>%
  mutate(`Porcentagem_Homens_Jovens` = as.numeric(`Porcentagem_Homens_Jovens`))

glimpse(df_rdd)
```


## Desemprego


```{r, include=FALSE}
library(skimr)
library(GGally)
```

```{r, echo=TRUE, warning=FALSE}
skim(df_rdd)

```

```{r}
# Distribuição de uma variável contínua
ggplot(df_rdd, aes(x = Taxa_de_analfabetismo)) +
  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "skyblue", color = "black") +
  geom_density(color = "red") +
  ggtitle("Distribuição da Taxa de Analfabetismo")

# Distribuição de uma variável categórica
ggplot(df, aes(x = groups)) +
  
  geom_bar(fill = "skyblue", color = "black") +
  ggtitle("Distribuição dos Grupos (Tratamento vs Controle)")

```


## Gini

## PIB *per capita*

## Renda abaixo de 1/4 SM

## Trabalho infantil

## Homens jovens 

## Homicídios

## Analisar o resultado dos modelos

