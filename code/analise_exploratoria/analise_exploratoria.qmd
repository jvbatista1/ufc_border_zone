---
title: "Exploratória"
author: "Victor Batista"
format: beamer
papersize: a2
execute:
  echo: false
  warning: false
header-includes:
  - \usepackage{adjustbox}  

---

```{r, include=FALSE}
dropbox <- "c:/Users/victor/dropbox/DISSERTACAO"

library("sf")
library("SpatialRDD")
library("tidyverse")
library("stargazer")
library("tmap")
library("rdrobust")
library("lfe")
library("geobr")
library("summarytools")
library("knitr")
library("kableExtra")
library("gifski")
library("readxl")
library("modelsummary")
library("webshot2")

```

```{r, include=FALSE}
#Lê os shapefiles
fronteira <- st_read(file.path(dropbox,"Fronteira/Faixa_de_Fronteira_por_UF_2022.shp")) %>%
  st_transform("WGS84")

#Uniformiza a faixa de fronteira como uma única região
linha_fronteira <- fronteira %>%
  mutate(pais = "BR") %>% 
  group_by(pais) %>% 
  summarise()

#Carrega sf dos municípios brasileiros
municipios <- read_municipality(year=2020, showProgress = T) %>%
  st_transform("WGS84")

#Carrega o sf dos países da América do Sul
america <- st_read(file.path(dropbox,"America/South_America.shp")) %>% 
  st_transform("WGS84")

#Carrega o sf dos municípios da faixa de fronteira
municipios_fronteira <- st_read(file.path(dropbox,"Municipios_Fronteira/Municipios_Faixa_Fronteira_2022.shp")) %>%
  st_transform("WGS84")

# Estabelece a nova proposta de faixa de fronteira
linha_fronteira_300km <- st_buffer(linha_fronteira, dist = 150000)

# Verifica municípios que passam a pertencer à região
# Adiciona variável de intercessão
municipios$inter <- st_intersects(municipios, linha_fronteira_300km, sparse = F)

# Adiciona variável de pertencimento à fronteira original
municipios <- municipios %>%
  mutate(fronteira = ifelse(code_muni %in% municipios_fronteira$CD_MUN, 1, 0))
```

```{r, include=FALSE}
# Cria tratamento e controle
df <- municipios |>
  #filtra os municípios na nova faixa
  filter(inter == T) |> 
  # cria o grupo de tratamento e controle
  mutate(treated = ifelse(code_muni %in% municipios_fronteira$CD_MUN, 1, 0),
         groups = ifelse(treated == 1, "treatment", "control"),
         # cria os arcos
         arcos = case_when(abbrev_state %in% c("AP", "PA", "AM", "AC", "RR") ~ "Arco Norte",
                           abbrev_state %in% c("RO", "MS", "MT") ~ "Arco Central",
                           abbrev_state %in% c("PR", "SC", "RS") ~ "Arco Sul",
                           abbrev_state %in% c("SP") ~ "Arco Sudeste")) |> 
  # exclui a variável classificatória. as recém criadas a substituem
  dplyr::select(-inter)

# prepara a tabela da fronteira para mergir com a df principal (municipios)
t <- municipios_fronteira |> 
  # remove colunas indesejadas
  select(-c("NM_REGIAO", "CD_UF", "NM_UF", "SIGLA_UF", "NM_MUN", "geometry")) |> 
  # padroniza o nome code_muni
  rename("code_muni" = "CD_MUN") |> 
  # altera o tipo das colunas para numeric e logic
  mutate(code_muni = as.numeric(code_muni),
         CID_GEMEA = ifelse(is.na(CID_GEMEA) == F, 1, 0))

# remove o componente gráfico
st_geometry(t) <- NULL

# realiza o join
df <- dplyr::left_join(df, t, by = "code_muni")
rm(t)

# prepara a tabela da sede dos mun da faixa da fronteira para mergir com a df principal (municipios)
sede_municipios <- st_read(file.path(dropbox,"Sedes_Municipios_Faixa_de_Fronteira_Cidades_Gemeas_2022_shp/Sedes_Municipios_Faixa_de_Fronteira_Cidades_Gemeas_2022.shp")) %>%
  st_transform("WGS84")

t <- sede_municipios %>%
  # seleciona colunas desejadas
  select(c("CD_MUN", "FAIXA_SEDE")) %>%
  # harmoniza os nomes de variáveis
  rename("code_muni" = "CD_MUN") %>%
  # modifica a classe da variável
  mutate(code_muni = as.numeric(code_muni),
         FAIXA_SEDE = ifelse(FAIXA_SEDE == "sim", 1, 0))

# remove a geometria da tabela para realizar o join
st_geometry(t) <- NULL

# realiza o join
df <- dplyr::left_join(df, t, by = "code_muni")
rm(t)

# prepara para juntar demais países da américa do sul na base de municípios
# Remove regiões sem fronteira com o br
america2 <- america %>%
  filter(!(COUNTRY %in% c("Brazil", "Falkland Islands (UK)",
                          "South Georgia and the South Sandwich Is (UK)", "Chile", "Ecuador")))

# verifica interseções
a <- st_intersects(df, america2, sparse = FALSE)

# renomeia colunas e cria variáveis dummy
a <- as.data.frame(a) %>%
  rename("Argentina" = "V1",
         "Bolivia" = "V2",
         "Colombia" = "V3",
         "French_Guiana" = "V4",
         "Guyana" = "V5",
         "Suriname" = "V6",
         "Paraguay" = "V7",
         "Peru" = "V8",
         "Uruguay" = "V9",
         "Venezuela" = "V10") %>%
  mutate(Argentina = ifelse(Argentina == T, 1, 0),
         Bolivia = ifelse(Bolivia == T, 1, 0),
         Colombia = ifelse(Colombia == T, 1, 0),
         French_Guiana = ifelse(French_Guiana == T, 1, 0),
         Guyana = ifelse(Guyana == T, 1, 0),
         Suriname = ifelse(Suriname == T, 1, 0),
         Paraguay = ifelse(Paraguay == T, 1, 0),
         Peru = ifelse(Peru == T, 1, 0),
         Uruguay = ifelse(Uruguay == T, 1, 0),
         Venezuela = ifelse(Venezuela == T, 1, 0))

df <- cbind(df, a)
rm(a)
```

## Mapa por grupos

```{r}
tm_shape(df) + tm_polygons(col = "groups")
```

## Mapa por arcos

```{r}
tm_shape(df) + tm_polygons(col = "arcos")
```

# Análise exploratória

```{r, include=FALSE}
base_homicidios <- read_excel(file.path(dropbox, "Base_homicidios.xlsx"))
base_homicidios <- base_homicidios %>%
  separate(Município, c("code_muni", "name_muni"), sep = 7) %>%
  separate(code_muni, c("code_muni", NA), sep = -1) %>%
  select(-name_muni)

df_rdd <- df %>%
  separate(code_muni, c("code_muni", NA), sep = -1)

df_rdd <- left_join(df_rdd, base_homicidios, by = "code_muni") %>%
  mutate(`Porcentagem_Homens_Jovens` = as.numeric(`Porcentagem_Homens_Jovens`))

outros_crimes <- read_csv(file.path(dropbox, "municipal_MSP.csv")) |> 
  mutate(id_municipio_6 = as.character(id_municipio_6))

df_rdd <- df_rdd |> 
  left_join(outros_crimes |> select(id_municipio_6:tentativa_hom_pc),
            join_by(code_muni==id_municipio_6))

df_rdd <- df_rdd |> 
  mutate(
   code_muni = as.character(code_muni),
   name_muni = as.character(name_muni),
   code_state = as.character(code_state),
   abbrev_state = as.character(abbrev_state),
   name_state = as.character(name_state),
   code_region = as.character(code_region),
   name_region = as.character(name_region),
   fronteira = as.logical(fronteira),
   treated = as.logical(treated),
   groups = as.character(groups),
   arcos = as.character(arcos),
   AREA_TOT = as.character(AREA_TOT),
   AREA_INT = as.character(AREA_INT),
   PORC_INT = as.character(PORC_INT),
   CID_GEMEA = as.logical(CID_GEMEA),
   FAIXA_SEDE = as.logical(FAIXA_SEDE),
   Argentina = as.logical(Argentina),
   Bolivia = as.logical(Bolivia),
   Colombia = as.logical(Colombia),
   French_Guiana = as.logical(French_Guiana),
   Guyana = as.logical(Guyana),
   Suriname = as.logical(Suriname),
   Paraguay = as.logical(Paraguay),
   Peru = as.logical(Peru),
   Uruguay = as.logical(Uruguay),
   Venezuela = as.logical(Venezuela)
  )
```

## Estatísticas socioeconômicas
```{r}
df_rdd |> 
  select(Taxa_de_analfabetismo:Porcentagem_Homens_Jovens) 
```

## Estatísticas homicídios
```{r}
df_rdd |> 
  select(`valor-2010`:`valor-2019`) |> 
  datasummary_skim()
```

## Estatísticas outros crimes
```{r}
df_rdd |> 
  select(feminicidio_pc:tentativa_hom_pc) |> 
  datasummary_skim()
```

## Estatísticas categóricas {style="font-size: 0.5em"}
```{r}
#| fontsize: 10pt

df_rdd |> 
  select(name_state, name_region, groups, arcos) |> 
  datasummary_skim()
```

---
---