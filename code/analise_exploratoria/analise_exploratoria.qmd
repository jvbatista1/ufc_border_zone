---
title: "Exploratória"
author: "Victor Batista"
format: revealjs
execute:
  echo: false
  warning: false
---

# Análise exploratória
```{r}
dropbox <- "c:/Users/victor/dropbox/DISSERTACAO"
library(sf)
library(tmap)
library(tidyverse)
library(readr)
library(skimr)
library(modelsummary)
library(rdrobust)

```


```{r, include=FALSE}
espaciais <- read_rds(file.path(dropbox, "dados_espaciais.rds"))
violencia <- read_rds(file.path(dropbox, "municipal.rds"))
violencia <- violencia |> 
  filter(!is.na(id_municipio))

df <- left_join(espaciais, violencia)
df
```

## Base com valor acima de zero
```{r}

df2 <- df|> 
  filter(valor_2010 != 0) |> 
  filter(valor_2011 != 0) |> 
  filter(valor_2012 != 0) |> 
  filter(valor_2013 != 0) |> 
  filter(valor_2014 != 0) |> 
  filter(valor_2015 != 0) |> 
  filter(valor_2016 != 0) |> 
  filter(valor_2017 != 0) |> 
  filter(valor_2018 != 0) |> 
  filter(valor_2019 != 0)

df2
```
## Mapas

```{r}
tm_shape(df) + tm_polygons(col = "groups")
```

```{r}
tm_shape(df) + tm_polygons(col = "arcos")
```

```{r}
library(ggplot2)
library(sf)

# Suponha que seu dataframe 'df' tenha uma coluna 'geometry' com os vetores SF
ggplot(data = df) +
  geom_sf(aes(fill = groups)) +  # 'groups' contém o status de tratamento/controle
  theme_minimal() +
  scale_fill_manual(values = c("control" = "blue", "treatment" = "red")) +
  labs(title = "Distribuição dos Municípios: Tratamento vs Controle",
       fill = "Grupo")

```

```{r}
ggplot(data = df) +
  geom_sf(aes(fill = log(mortes_violentas))) +  # 'mortes_violentas' é o indicador de segurança
  theme_minimal() +
  scale_fill_viridis_c() +  # Escala de cores contínuas para indicadores numéricos
  labs(title = "Distribuição de Mortes Violentas por Município",
       fill = "Mortes Violentas")

```

```{r}
library(ggplot2)
library(sf)

ggplot(data = df) +
  geom_sf(aes(fill = distancia_fronteira_terrestre)) +
  scale_fill_viridis_c() +  # Escala de cores para a distância
  labs(title = "Distância dos Municípios à Fronteira Terrestre",
       fill = "Distância (km)")

```


## Estatísticas socioeconômicas
```{r}
df |> 
  select(taxa_analfabetismo:taxa_homens_jovens) |> 
  datasummary_skim()
```

## Estatísticas homicídios
```{r}
df |> 
  select(valor_2010:valor_2019) |> 
  datasummary_skim()
```

## Estatísticas outros crimes
```{r}
df |> 
  select(feminicidio:mortes_violentas) |> 
  datasummary_skim()
```

## Estatísticas categóricas 
```{r}
df |> 
  select(groups, arcos) |> 
  datasummary_skim()
```

# Dispersão a partir das distâncias

```{r}
ggplot(df, aes(x = distancia_fronteira_terrestre, y = mortes_violentas)) +
  geom_point(color = "blue") +  # Gráfico de dispersão
  geom_vline(xintercept = 150000, linetype = "dashed", color = "red") +  # Linha vertical em 150 km
  labs(
    title = "Dispersão das Mortes Violentas pela Distância à Fronteira Terrestre",
    x = "Distância à Fronteira Terrestre (m)",
    y = "Mortes Violentas"
  ) +
  theme_minimal()
```

```{r}
ggplot(df, aes(x = distancias_fronteira_interior, y = (mortes_violentas*populacao/100000))) +
  geom_point(color = "blue") +  # Gráfico de dispersão
  geom_vline(xintercept = 0, linetype = "dashed", color = "red") +  # Linha vertical em 150 km
  labs(
    title = "Dispersão das Mortes Violentas pela Distância ao Limite dos Municípios da FF",
    x = "Distância ao limite dos municípios da FF (m)",
    y = "Mortes Violentas"
  ) +
  theme_minimal()
```

```{r}
# Suponha que "distancia_fronteira_terrestre" seja a running variable e "mortes_violentas" seja o resultado
# Limite de 150 km para a fronteira
rd_est <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira_terrestre, c = 150000)

# Resumo dos resultados
summary(rd_est)
```

```{r}
# Testar diferentes bandwidths

# Bandwidth de 30.000 km
rd_est_30k <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira_terrestre, c = 150000, h = 30000)
summary(rd_est_30k)

# Bandwidth de 40.000 km
rd_est_40k <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira_terrestre, c = 150000, h = 40000)
summary(rd_est_40k)

# Bandwidth de 60.000 km
rd_est_60k <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira_terrestre, c = 150000, h = 60000)
summary(rd_est_60k)

```

```{r}
# Definir o ponto de corte
cutoff <- 150000

# Lista de variáveis de segurança
seguranca_vars <- c("feminicidio", "hom_doloso", "lesao", "mandado", "transito", "esclarecer", "latrocinio", "tentativa_hom", "mortes_violentas")

# Loop para rodar o modelo com cada variável de segurança
for (var in seguranca_vars) {
  cat("\n\n### Resultados para a variável:", var, "\n")
  
  # Executar o modelo com bandwidth padrão
  rd_est <- rdrobust(y = df[[var]], x = df$distancia_fronteira_terrestre, c = cutoff)
  print(summary(rd_est))
}

```


```{r}
rdplot(df$mortes_violentas, df$distancia_fronteira_terrestre, c = 150000)

rdplot(df$mortes_violentas, df$distancia_fronteira_terrestre, c = 100000)

rdplot(df$mortes_violentas, df$distancia_fronteira_terrestre, c = 200000)

```

```{r}
# Variável moderadora (PIB per capita)
moderator <- df$pibpc

# Interação no modelo RD
rd_with_interaction <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira, 
                                covs = cbind(moderator, df$distancia_fronteira * moderator), 
                                c = 150000)

# Interação no modelo RD
rd_with_interaction1 <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira, 
                                covs = cbind(df$taxa_analfabetismo, df$distancia_fronteira * df$taxa_analfabetismo), 
                                c = 150000)

# Interação no modelo RD
rd_with_interaction2 <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira, 
                                covs = cbind(df$taxa_desemprego, df$distancia_fronteira * df$taxa_desemprego), 
                                c = 150000)

# Interação no modelo RD
rd_with_interaction3 <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira, 
                                covs = cbind(df$taxa_renda_pobre, df$distancia_fronteira * df$taxa_renda_pobre), 
                                c = 150000)

# Interação no modelo RD
rd_with_interaction4 <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira, 
                                covs = cbind(df$taxa_trab_infantil, df$distancia_fronteira * df$taxa_trab_infantil), 
                                c = 150000)

# Interação no modelo RD
rd_with_interaction5 <- rdrobust(y = df$mortes_violentas, x = df$distancia_fronteira, 
                                covs = cbind(df$taxa_homens_jovens, df$distancia_fronteira * df$taxa_homens_jovens), 
                                c = 150000)

# Visualizar resultados
summary(rd_with_interaction)
summary(rd_with_interaction1)
summary(rd_with_interaction2)
summary(rd_with_interaction3)
summary(rd_with_interaction4)
summary(rd_with_interaction5)


```


# Homicídios

## Gráficos

### Histograma por ano
```{r}
# Criar histogramas para cada ano
taxa_homicidios_long <- df %>% 
  select(id_municipio, groups, valor_2010:valor_2019)  |> 
  pivot_longer(cols = valor_2010:valor_2019, names_to = "year", values_to = "taxa_homicidio")

taxa_homicidios_long_semzeros <- df %>% 
  select(id_municipio, groups, valor_2010:valor_2019) %>%
  pivot_longer(cols = valor_2010:valor_2019, names_to = "year", values_to = "taxa_homicidio") |> 
  filter(taxa_homicidio != 0)

ggplot(taxa_homicidios_long, aes(x = taxa_homicidio, fill = groups)) +
  geom_histogram(position = 'identity', bins = 30, alpha = 0.5, color = "gray30") +
  facet_wrap(~ year, scales = "free_x") +
  scale_fill_viridis_d(option = "C") +
  ggtitle("Distribuição das Taxas de Homicídio de 2010 a 2019") +
  theme_minimal() +
  labs(x = "Taxa de Homicídio", y = "Frequência", fill = "Grupo")
  
ggsave(file.path(output, "figures/histog_hom.jpg"), width = 16, units = "cm", dpi = 600)

```

### Boxplots
```{r}
# Criar boxplots para comparar grupos
ggplot(taxa_homicidios_long, aes(x = year, y = taxa_homicidio, fill = groups)) +
  geom_boxplot(alpha = 0.5) +
  scale_fill_viridis_d(option = "C", name = "Grupo") +
  ggtitle("Comparação das Taxas de Homicídio de 2010 a 2019 por Grupo") +
  theme_minimal() +
  labs(x = "Ano", y = "Taxa de Homicídio", fill = "Grupo")

ggsave(file.path(output, "figures/boxplot_hom.jpg"), width = 16, units = "cm", dpi = 600)
```

### Mapas

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df |> filter(arcos == "Arco Norte")) +
  geom_sf(aes(fill = mortes_violentas, colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Taxa de Homicídio") +
  ggtitle("Taxa de Homicídios por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")
```

## Gráficos

### Histograma por ano
```{r}
# Criar histogramas para cada ano
taxa_homicidios_long2 <- df_rdd2 %>% 
  select(code_muni, groups, `valor-2010`:`valor-2019`) %>%
  pivot_longer(cols = `valor-2010`:`valor-2019`, names_to = "year", values_to = "taxa_homicidio")


ggplot(taxa_homicidios_long2, aes(x = taxa_homicidio, fill = groups)) +
  geom_histogram(position = 'identity', bins = 30, alpha = 0.5, color = "gray30") +
  facet_wrap(~ year, scales = "free_x") +
  scale_fill_viridis_d(option = "C") +
  ggtitle("Distribuição das Taxas de Homicídio de 2010 a 2019 (non-zero)") +
  theme_minimal() +
  labs(x = "Taxa de Homicídio", y = "Frequência", fill = "Grupo")

ggsave(file.path(output, "figures/histog_hom_nonzero.jpg"), width = 16, units = "cm", dpi = 600)

```

### Boxplots
```{r}
# Criar boxplots para comparar grupos
ggplot(taxa_homicidios_long2, aes(x = year, y = taxa_homicidio, fill = groups)) +
  geom_boxplot(alpha = 0.5) +
  scale_fill_viridis_d(option = "C", name = "Grupo") +
  ggtitle("Comparação das Taxas de Homicídio de 2010 a 2019 por Grupo (non-zero)") +
  theme_minimal() +
  labs(x = "Ano", y = "Taxa de Homicídio", fill = "Grupo")

ggsave(file.path(output, "figures/boxplot_hom_nonzero.jpg"), width = 16, units = "cm", dpi = 600)
```

### Mapas

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd) +
  geom_sf(aes(fill = log(`valor-2019`), colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log da Taxa de Homicídio") +
  ggtitle("Taxa de Homicídios por Município em 2019 (non-zero)") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_hom_2019_nonzero.jpg"), width = 16, units = "cm", dpi = 600)
```

## Regressões

```{r}
list("ln hom 2010" = lm(log(`valor-2010`) ~ treated, data = df_rdd |> filter(`valor-2010` != 0)),
     "ln hom 2011" = lm(log(`valor-2011`) ~ treated, data = df_rdd |> filter(`valor-2011` != 0)),
     "ln hom 2012" = lm(log(`valor-2012`) ~ treated, data = df_rdd |> filter(`valor-2012` != 0)),
     "ln hom 2013" = lm(log(`valor-2013`) ~ treated, data = df_rdd |> filter(`valor-2013` != 0)),
     "ln hom 2014" = lm(log(`valor-2014`) ~ treated, data = df_rdd |> filter(`valor-2014` != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/reg_hom_1.tex"))
```

```{r}
list("ln hom 2015" = lm(log(`valor-2015`) ~ treated, data = df_rdd |> filter(`valor-2015` != 0)),
     "ln hom 2016" = lm(log(`valor-2016`) ~ treated, data = df_rdd |> filter(`valor-2016` != 0)),
     "ln hom 2017" = lm(log(`valor-2017`) ~ treated, data = df_rdd |> filter(`valor-2017` != 0)),
     "ln hom 2018" = lm(log(`valor-2018`) ~ treated, data = df_rdd |> filter(`valor-2018` != 0)),
     "ln hom 2019" = lm(log(`valor-2019`) ~ treated, data = df_rdd |> filter(`valor-2019` != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/reg_hom_2.tex"))
```

```{r}
list("ln hom 2010" = lm(log(`valor-2010`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2010` != 0)),
     "ln hom 2011" = lm(log(`valor-2011`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2011` != 0)),
     "ln hom 2012" = lm(log(`valor-2012`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2012` != 0)),
     "ln hom 2013" = lm(log(`valor-2013`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2013` != 0)),
     "ln hom 2014" = lm(log(`valor-2014`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2014` != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/reg_hom_3.tex"))
```

```{r}
list("ln hom 2015" = lm(log(`valor-2015`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2015` != 0)),
     "ln hom 2016" = lm(log(`valor-2016`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2016` != 0)),
     "ln hom 2017" = lm(log(`valor-2017`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2017` != 0)),
     "ln hom 2018" = lm(log(`valor-2018`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2018` != 0)),
     "ln hom 2019" = lm(log(`valor-2019`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2019` != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/reg_hom_4.tex"))
```

# Outros crimes

## Gráficos

### Histograma

```{r}
# Criar histogramas para cada ano
outros_crimes_long <- df_rdd %>% 
  filter(name_muni != "Cruzmaltina" & name_muni != "Flórida") |> 
  select(code_muni, groups, feminicidio_pc:tentativa_hom_pc) %>%
  pivot_longer(cols = feminicidio_pc:tentativa_hom_pc, names_to = "crime", values_to = "taxa_100mil")

ggplot(outros_crimes_long, aes(x = taxa_100mil, fill = groups)) +
  geom_histogram(position = 'identity', bins = 30, alpha = 0.5, color = "gray30") +
  facet_wrap(~ crime, scales = "free_x") +
  scale_fill_viridis_d(option = "C") +
  ggtitle("Distribuição das taxas de outros crimes em 2019") +
  theme_minimal() +
  labs(x = "Taxa", y = "Frequência", fill = "Grupo")

ggsave(file.path(output, "figures/histog_outros.jpg"), width = 16, units = "cm", dpi = 600)
```

### Boxplot

```{r}
ggplot(outros_crimes_long, aes(x = crime, y = taxa_100mil, fill = groups)) +
  geom_boxplot(alpha = 0.5) +
  scale_fill_viridis_d(option = "C", name = "Grupo") +
  ggtitle("Comparação das taxas de outros crimes em 2019 por Grupo") +
  theme_minimal() +
  labs(x = "Ano", y = "Taxa", fill = "Grupo")

ggsave(file.path(output, "figures/boxplot_outros.jpg"), width = 16, units = "cm", dpi = 600)
```
```{r}
df_rdd |> 
  mutate(feminicidio_pc = ifelse(feminicidio_pc == 0, NA, feminicidio_pc)) |> 
  mutate(hom_doloso_pc = ifelse(hom_doloso_pc == 0, NA, hom_doloso_pc)) |> 
  mutate(lesao_pc = ifelse(lesao_pc == 0, NA, lesao_pc)) |> 
  mutate(mandado_pc = ifelse(mandado_pc == 0, NA, mandado_pc)) |> 
  mutate(transito_pc = ifelse(transito_pc == 0, NA, transito_pc)) |> 
  mutate(esclarecer_pc = ifelse(esclarecer_pc == 0, NA, esclarecer_pc)) |> 
  mutate(latrocinio_pc = ifelse(latrocinio_pc == 0, NA, latrocinio_pc)) |> 
  mutate(tentativa_hom_pc = ifelse(tentativa_hom_pc == 0, NA, tentativa_hom_pc)) |> 
  filter(name_muni != "Cruzmaltina" & name_muni != "Flórida") |> 
  select(code_muni, groups, feminicidio_pc:tentativa_hom_pc) %>%
  pivot_longer(cols = feminicidio_pc:tentativa_hom_pc, names_to = "crime", values_to = "taxa_100mil") |> 
  ggplot(aes(x = taxa_100mil, fill = groups)) +
  geom_histogram(position = 'identity', bins = 30, alpha = 0.5, color = "gray30") +
  facet_wrap(~ crime, scales = "free_x") +
  scale_fill_viridis_d(option = "C") +
  ggtitle("Distribuição das taxas de outros crimes em 2019") +
  theme_minimal() +
  labs(x = "Taxa", y = "Frequência", fill = "Grupo")

ggsave(file.path(output, "figures/histog_outros_nonzero.jpg"), width = 16, units = "cm", dpi = 600)
```


```{r}
df_rdd %>% 
  mutate(feminicidio_pc = ifelse(feminicidio_pc == 0, NA, feminicidio_pc)) |> 
  mutate(hom_doloso_pc = ifelse(hom_doloso_pc == 0, NA, hom_doloso_pc)) |> 
  mutate(lesao_pc = ifelse(lesao_pc == 0, NA, lesao_pc)) |> 
  mutate(mandado_pc = ifelse(mandado_pc == 0, NA, mandado_pc)) |> 
  mutate(transito_pc = ifelse(transito_pc == 0, NA, transito_pc)) |> 
  mutate(esclarecer_pc = ifelse(esclarecer_pc == 0, NA, esclarecer_pc)) |> 
  mutate(latrocinio_pc = ifelse(latrocinio_pc == 0, NA, latrocinio_pc)) |> 
  mutate(tentativa_hom_pc = ifelse(tentativa_hom_pc == 0, NA, tentativa_hom_pc)) |> 
  filter(name_muni != "Cruzmaltina" & name_muni != "Flórida") |> 
  select(code_muni, groups, feminicidio_pc:tentativa_hom_pc) %>%
  pivot_longer(cols = feminicidio_pc:tentativa_hom_pc, names_to = "crime", values_to = "taxa_100mil") |>
  ggplot(aes(x = crime, y = taxa_100mil, fill = groups)) +
  geom_boxplot(alpha = 0.5) +
  scale_fill_viridis_d(option = "C", name = "Grupo") +
  ggtitle("Comparação das taxas de outros crimes em 2019 por Grupo") +
  theme_minimal() +
  labs(x = "Ano", y = "Taxa", fill = "Grupo")

ggsave(file.path(output, "figures/boxplot_outros_nonzero.jpg"), width = 16, units = "cm", dpi = 600)

```

### Mapas

```{r}

# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`feminicidio_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de Feminicídios por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_feminicídios.jpg"), width = 16, units = "cm", dpi = 600)

```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`hom_doloso_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de Homicídios dolosos por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_hom_dolosos.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`lesao_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de Lesão Corporal seguida de morte por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_lesao.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`mandado_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de cumprimentos de Mandados de Prisão por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_mandados.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`transito_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de mortes do trânsito por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_transito.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`esclarecer_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de mortes a esclarecer por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_esclarecer.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`latrocinio_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de Latrocínios por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_latrocinios.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`tentativa_hom_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de tentativas de homicídio por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_tentativas.jpg"), width = 16, units = "cm", dpi = 600)
```

## Regressões

```{r}
list("ln feminicidio" = lm(log(feminicidio_pc) ~ treated, data = df_rdd |> filter(feminicidio_pc != 0)),
     "ln hom doloso" = lm(log(hom_doloso_pc) ~ treated, data = df_rdd |> filter(hom_doloso_pc != 0)),
     "ln lesao" = lm(log(lesao_pc) ~ treated, data = df_rdd |> filter(lesao_pc != 0)),
     "ln mandado" = lm(log(mandado_pc) ~ treated, data = df_rdd |> filter(mandado_pc != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/outros_crimes_1.tex"))
```

```{r}
list("ln transito" = lm(log(transito_pc) ~ treated, data = df_rdd |> filter(transito_pc != 0)),
     "ln esclarecer" = lm(log(esclarecer_pc) ~ treated, data = df_rdd |> filter(esclarecer_pc != 0)),
     "ln latrocinio" = lm(log(latrocinio_pc) ~ treated, data = df_rdd |> filter(latrocinio_pc != 0)),
     "ln tentativa" = lm(log(tentativa_hom_pc) ~ treated, data = df_rdd |> filter(tentativa_hom_pc != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/outros_crimes_2.tex"))
```

```{r}
list("ln feminicidio" = lm(log(feminicidio_pc) ~ treated+abbrev_state, data = df_rdd |> filter(feminicidio_pc != 0)),
     "ln hom doloso" = lm(log(hom_doloso_pc) ~ treated+abbrev_state, data = df_rdd |> filter(hom_doloso_pc != 0)),
     "ln lesao" = lm(log(lesao_pc) ~ treated+abbrev_state, data = df_rdd |> filter(lesao_pc != 0)),
     "ln mandado" = lm(log(mandado_pc) ~ treated+abbrev_state, data = df_rdd |> filter(mandado_pc != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/outros_crimes_3.tex"))
```

```{r}
list("ln transito" = lm(log(transito_pc) ~ treated+abbrev_state, data = df_rdd |> filter(transito_pc != 0)),
     "ln esclarecer" = lm(log(esclarecer_pc) ~ treated+abbrev_state, data = df_rdd |> filter(esclarecer_pc != 0)),
     "ln latrocinio" = lm(log(latrocinio_pc) ~ treated+abbrev_state, data = df_rdd |> filter(latrocinio_pc != 0)),
     "ln tentativa" = lm(log(tentativa_hom_pc) ~ treated+abbrev_state, data = df_rdd |> filter(tentativa_hom_pc != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/outros_crimes_4.tex"))
```

# Modelo Logit/Probit

```{r}
df_rdd3 <- df_rdd |> 
  mutate(`valor-2010` = ifelse(`valor-2010` > 0, TRUE, FALSE),
         `valor-2011` = ifelse(`valor-2011` > 0, TRUE, FALSE),
         `valor-2012` = ifelse(`valor-2012` > 0, TRUE, FALSE),
         `valor-2013` = ifelse(`valor-2013` > 0, TRUE, FALSE),
         `valor-2014` = ifelse(`valor-2014` > 0, TRUE, FALSE),
         `valor-2015` = ifelse(`valor-2015` > 0, TRUE, FALSE),
         `valor-2016` = ifelse(`valor-2016` > 0, TRUE, FALSE),
         `valor-2017` = ifelse(`valor-2017` > 0, TRUE, FALSE),
         `valor-2018` = ifelse(`valor-2018` > 0, TRUE, FALSE),
         `valor-2019` = ifelse(`valor-2019` > 0, TRUE, FALSE),
         feminicidio_pc = ifelse(feminicidio_pc > 0, TRUE, FALSE),
         hom_doloso_pc = ifelse(hom_doloso_pc > 0, TRUE, FALSE),
         lesao_pc = ifelse(lesao_pc > 0, TRUE, FALSE),
         mandado_pc = ifelse(mandado_pc > 0, TRUE, FALSE),
         transito_pc = ifelse(transito_pc > 0, TRUE, FALSE),
         esclarecer_pc = ifelse(esclarecer_pc > 0, TRUE, FALSE),
         tentativa_hom_pc = ifelse(tentativa_hom_pc > 0, TRUE, FALSE),
         latrocinio_pc = ifelse(latrocinio_pc > 0, TRUE, FALSE),)

```

```{r}
list("logit hom 2010" = glm(`valor-2010` ~ treated, data = df_rdd3, family = (binomial)),
     "logit hom 2011" = glm(`valor-2011` ~ treated, data = df_rdd3, family = (binomial)),
     "logit hom 2012" = glm(`valor-2012` ~ treated, data = df_rdd3, family = (binomial)),
     "logit hom 2013" = glm(`valor-2013` ~ treated, data = df_rdd3, family = (binomial)),
     "logit hom 2014" = glm(`valor-2014` ~ treated, data = df_rdd3, family = (binomial))) %>%
  modelsummary(stars = T)
```

```{r}
logitmfx(`valor-2019` ~ treated + abbrev_state, data = df_rdd3)
logitmfx(feminicidio_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(hom_doloso_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(lesao_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(mandado_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(transito_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(esclarecer_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(tentativa_hom_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(latrocinio_pc ~ treated + abbrev_state, data = df_rdd3)

```


