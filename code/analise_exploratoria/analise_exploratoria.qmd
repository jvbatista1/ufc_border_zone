---
title: "Exploratória"
author: "Victor Batista"
format: revealjs
execute:
  echo: false
  warning: false
---

```{r, include=FALSE}
dropbox <- "c:/Users/victo/dropbox/DISSERTACAO"
output <- "c:/Users/victo/git/ufc_border_zone/latex/"

library("sf")
library("SpatialRDD")
library("tidyverse")
library("stargazer")
library("tmap")
library("rdrobust")
library("lfe")
library("geobr")
library("summarytools")
library("knitr")
library("kableExtra")
library("gifski")
library("readxl")
library("modelsummary")
library("webshot2")

```

```{r, include=FALSE}
#Lê os shapefiles
fronteira <- st_read(file.path(dropbox,"Fronteira/Faixa_de_Fronteira_por_UF_2022.shp")) %>%
  st_transform("WGS84")

#Uniformiza a faixa de fronteira como uma única região
linha_fronteira <- fronteira %>%
  mutate(pais = "BR") %>% 
  group_by(pais) %>% 
  summarise()

#Carrega sf dos municípios brasileiros
municipios <- read_municipality(year=2020, showProgress = T) %>%
  st_transform("WGS84")

#Carrega o sf dos países da América do Sul
america <- st_read(file.path(dropbox,"America/South_America.shp")) %>% 
  st_transform("WGS84")

#Carrega o sf dos municípios da faixa de fronteira
municipios_fronteira <- st_read(file.path(dropbox,"Municipios_Fronteira/Municipios_Faixa_Fronteira_2022.shp")) %>%
  st_transform("WGS84")

# Estabelece a nova proposta de faixa de fronteira
linha_fronteira_300km <- st_buffer(linha_fronteira, dist = 150000)

# Verifica municípios que passam a pertencer à região
# Adiciona variável de intercessão
municipios$inter <- st_intersects(municipios, linha_fronteira_300km, sparse = F)

# Adiciona variável de pertencimento à fronteira original
municipios <- municipios %>%
  mutate(fronteira = ifelse(code_muni %in% municipios_fronteira$CD_MUN, 1, 0))
```

```{r, include=FALSE}
# Cria tratamento e controle
df <- municipios |>
  #filtra os municípios na nova faixa
  filter(inter == T) |> 
  # cria o grupo de tratamento e controle
  mutate(treated = ifelse(code_muni %in% municipios_fronteira$CD_MUN, 1, 0),
         groups = ifelse(treated == 1, "treatment", "control"),
         # cria os arcos
         arcos = case_when(abbrev_state %in% c("AP", "PA", "AM", "AC", "RR") ~ "Arco Norte",
                           abbrev_state %in% c("RO", "MS", "MT") ~ "Arco Central",
                           abbrev_state %in% c("PR", "SC", "RS") ~ "Arco Sul",
                           abbrev_state %in% c("SP") ~ "Arco Sudeste")) |> 
  # exclui a variável classificatória. as recém criadas a substituem
  dplyr::select(-inter)

# prepara a tabela da fronteira para mergir com a df principal (municipios)
t <- municipios_fronteira |> 
  # remove colunas indesejadas
  select(-c("NM_REGIAO", "CD_UF", "NM_UF", "SIGLA_UF", "NM_MUN", "geometry")) |> 
  # padroniza o nome code_muni
  rename("code_muni" = "CD_MUN") |> 
  # altera o tipo das colunas para numeric e logic
  mutate(code_muni = as.numeric(code_muni),
         CID_GEMEA = ifelse(is.na(CID_GEMEA) == F, 1, 0))

# remove o componente gráfico
st_geometry(t) <- NULL

# realiza o join
df <- dplyr::left_join(df, t, by = "code_muni")
rm(t)

# prepara a tabela da sede dos mun da faixa da fronteira para mergir com a df principal (municipios)
sede_municipios <- st_read(file.path(dropbox,"Sedes_Municipios_Faixa_de_Fronteira_Cidades_Gemeas_2022_shp/Sedes_Municipios_Faixa_de_Fronteira_Cidades_Gemeas_2022.shp")) %>%
  st_transform("WGS84")

t <- sede_municipios %>%
  # seleciona colunas desejadas
  select(c("CD_MUN", "FAIXA_SEDE")) %>%
  # harmoniza os nomes de variáveis
  rename("code_muni" = "CD_MUN") %>%
  # modifica a classe da variável
  mutate(code_muni = as.numeric(code_muni),
         FAIXA_SEDE = ifelse(FAIXA_SEDE == "sim", 1, 0))

# remove a geometria da tabela para realizar o join
st_geometry(t) <- NULL

# realiza o join
df <- dplyr::left_join(df, t, by = "code_muni")
rm(t)

# prepara para juntar demais países da américa do sul na base de municípios
# Remove regiões sem fronteira com o br
america2 <- america %>%
  filter(!(COUNTRY %in% c("Brazil", "Falkland Islands (UK)",
                          "South Georgia and the South Sandwich Is (UK)", "Chile", "Ecuador")))

# verifica interseções
a <- st_intersects(df, america2, sparse = FALSE)

# renomeia colunas e cria variáveis dummy
a <- as.data.frame(a) %>%
  rename("Argentina" = "V1",
         "Bolivia" = "V2",
         "Colombia" = "V3",
         "French_Guiana" = "V4",
         "Guyana" = "V5",
         "Suriname" = "V6",
         "Paraguay" = "V7",
         "Peru" = "V8",
         "Uruguay" = "V9",
         "Venezuela" = "V10") %>%
  mutate(Argentina = ifelse(Argentina == T, 1, 0),
         Bolivia = ifelse(Bolivia == T, 1, 0),
         Colombia = ifelse(Colombia == T, 1, 0),
         French_Guiana = ifelse(French_Guiana == T, 1, 0),
         Guyana = ifelse(Guyana == T, 1, 0),
         Suriname = ifelse(Suriname == T, 1, 0),
         Paraguay = ifelse(Paraguay == T, 1, 0),
         Peru = ifelse(Peru == T, 1, 0),
         Uruguay = ifelse(Uruguay == T, 1, 0),
         Venezuela = ifelse(Venezuela == T, 1, 0))

df <- cbind(df, a)
rm(a)
```

# Análise exploratória

```{r, include=FALSE}
base_homicidios <- read_excel(file.path(dropbox, "Base_homicidios.xlsx"))
base_homicidios <- base_homicidios %>%
  separate(Município, c("code_muni", "name_muni"), sep = 7) %>%
  separate(code_muni, c("code_muni", NA), sep = -1) %>%
  select(-name_muni)

df_rdd <- df %>%
  separate(code_muni, c("code_muni", NA), sep = -1)

df_rdd <- left_join(df_rdd, base_homicidios, by = "code_muni") %>%
  mutate(`Porcentagem_Homens_Jovens` = as.numeric(`Porcentagem_Homens_Jovens`))

outros_crimes <- read_csv(file.path(dropbox, "municipal_MSP.csv")) |> 
  mutate(id_municipio_6 = as.character(id_municipio_6))

df_rdd <- df_rdd |> 
  left_join(outros_crimes |> select(id_municipio_6:tentativa_hom_pc),
            join_by(code_muni==id_municipio_6))

df_rdd <- df_rdd |> 
  mutate(
   code_muni = as.character(code_muni),
   name_muni = as.character(name_muni),
   code_state = as.character(code_state),
   abbrev_state = as.character(abbrev_state),
   name_state = as.character(name_state),
   code_region = as.character(code_region),
   name_region = as.character(name_region),
   fronteira = as.logical(fronteira),
   treated = as.logical(treated),
   groups = as.character(groups),
   arcos = as.character(arcos),
   AREA_TOT = as.character(AREA_TOT),
   AREA_INT = as.character(AREA_INT),
   PORC_INT = as.character(PORC_INT),
   CID_GEMEA = as.logical(CID_GEMEA),
   FAIXA_SEDE = as.logical(FAIXA_SEDE),
   Argentina = as.logical(Argentina),
   Bolivia = as.logical(Bolivia),
   Colombia = as.logical(Colombia),
   French_Guiana = as.logical(French_Guiana),
   Guyana = as.logical(Guyana),
   Suriname = as.logical(Suriname),
   Paraguay = as.logical(Paraguay),
   Peru = as.logical(Peru),
   Uruguay = as.logical(Uruguay),
   Venezuela = as.logical(Venezuela)
  )
```

## Base com valor acima de zero
```{r}

df_rdd2 <- df_rdd |> 
  filter(`valor-2010` != 0) |> 
  filter(`valor-2011` != 0) |> 
  filter(`valor-2012` != 0) |> 
  filter(`valor-2013` != 0) |> 
  filter(`valor-2014` != 0) |> 
  filter(`valor-2015` != 0) |> 
  filter(`valor-2016` != 0) |> 
  filter(`valor-2017` != 0) |> 
  filter(`valor-2018` != 0) |> 
  filter(`valor-2019` != 0)
```


## Estatísticas socioeconômicas
```{r}
df_rdd |> 
  select(Taxa_de_analfabetismo:Porcentagem_Homens_Jovens) |> 
  datasummary_skim(output = file.path(output, "tables/stat_socioecon.tex"))
```

## Estatísticas homicídios
```{r}
df_rdd |> 
  select(`valor-2010`:`valor-2019`) |> 
  datasummary_skim(output = file.path(output, "tables/stat_homicidios.tex"))
```

## Estatísticas outros crimes
```{r}
df_rdd |> 
  select(feminicidio_pc:tentativa_hom_pc) |> 
  datasummary_skim(output = file.path(output, "tables/stat_outros.tex"))
```

## Estatísticas categóricas 
```{r}
df_rdd |> 
  select(name_state, name_region, groups, arcos) |> 
  datasummary_skim(output = file.path(output, "tables/stat_categ.tex"))
```

# Homicídios

## Gráficos

### Histograma por ano
```{r}
# Criar histogramas para cada ano
taxa_homicidios_long <- df_rdd %>% 
  select(code_muni, groups, `valor-2010`:`valor-2019`) %>%
  pivot_longer(cols = `valor-2010`:`valor-2019`, names_to = "year", values_to = "taxa_homicidio")

taxa_homicidios_long_semzeros <- df_rdd %>% 
  select(code_muni, groups, `valor-2010`:`valor-2019`) %>%
  pivot_longer(cols = `valor-2010`:`valor-2019`, names_to = "year", values_to = "taxa_homicidio") |> 
  filter(taxa_homicidio != 0)

ggplot(taxa_homicidios_long, aes(x = taxa_homicidio, fill = groups)) +
  geom_histogram(position = 'identity', bins = 30, alpha = 0.5, color = "gray30") +
  facet_wrap(~ year, scales = "free_x") +
  scale_fill_viridis_d(option = "C") +
  ggtitle("Distribuição das Taxas de Homicídio de 2010 a 2019") +
  theme_minimal() +
  labs(x = "Taxa de Homicídio", y = "Frequência", fill = "Grupo")
  
ggsave(file.path(output, "figures/histog_hom.jpg"), width = 16, units = "cm", dpi = 600)

```

### Boxplots
```{r}
# Criar boxplots para comparar grupos
ggplot(taxa_homicidios_long, aes(x = year, y = taxa_homicidio, fill = groups)) +
  geom_boxplot(alpha = 0.5) +
  scale_fill_viridis_d(option = "C", name = "Grupo") +
  ggtitle("Comparação das Taxas de Homicídio de 2010 a 2019 por Grupo") +
  theme_minimal() +
  labs(x = "Ano", y = "Taxa de Homicídio", fill = "Grupo")

ggsave(file.path(output, "figures/boxplot_hom.jpg"), width = 16, units = "cm", dpi = 600)
```

### Mapas

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd) +
  geom_sf(aes(fill = `valor-2019`, colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Taxa de Homicídio") +
  ggtitle("Taxa de Homicídios por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_hom_2019.jpg"), width = 16, units = "cm", dpi = 600)
```

## Gráficos

### Histograma por ano
```{r}
# Criar histogramas para cada ano
taxa_homicidios_long2 <- df_rdd2 %>% 
  select(code_muni, groups, `valor-2010`:`valor-2019`) %>%
  pivot_longer(cols = `valor-2010`:`valor-2019`, names_to = "year", values_to = "taxa_homicidio")


ggplot(taxa_homicidios_long2, aes(x = taxa_homicidio, fill = groups)) +
  geom_histogram(position = 'identity', bins = 30, alpha = 0.5, color = "gray30") +
  facet_wrap(~ year, scales = "free_x") +
  scale_fill_viridis_d(option = "C") +
  ggtitle("Distribuição das Taxas de Homicídio de 2010 a 2019 (non-zero)") +
  theme_minimal() +
  labs(x = "Taxa de Homicídio", y = "Frequência", fill = "Grupo")

ggsave(file.path(output, "figures/histog_hom_nonzero.jpg"), width = 16, units = "cm", dpi = 600)

```

### Boxplots
```{r}
# Criar boxplots para comparar grupos
ggplot(taxa_homicidios_long2, aes(x = year, y = taxa_homicidio, fill = groups)) +
  geom_boxplot(alpha = 0.5) +
  scale_fill_viridis_d(option = "C", name = "Grupo") +
  ggtitle("Comparação das Taxas de Homicídio de 2010 a 2019 por Grupo (non-zero)") +
  theme_minimal() +
  labs(x = "Ano", y = "Taxa de Homicídio", fill = "Grupo")

ggsave(file.path(output, "figures/boxplot_hom_nonzero.jpg"), width = 16, units = "cm", dpi = 600)
```

### Mapas

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd) +
  geom_sf(aes(fill = log(`valor-2019`), colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log da Taxa de Homicídio") +
  ggtitle("Taxa de Homicídios por Município em 2019 (non-zero)") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_hom_2019_nonzero.jpg"), width = 16, units = "cm", dpi = 600)
```

## Regressões

```{r}
list("ln hom 2010" = lm(log(`valor-2010`) ~ treated, data = df_rdd |> filter(`valor-2010` != 0)),
     "ln hom 2011" = lm(log(`valor-2011`) ~ treated, data = df_rdd |> filter(`valor-2011` != 0)),
     "ln hom 2012" = lm(log(`valor-2012`) ~ treated, data = df_rdd |> filter(`valor-2012` != 0)),
     "ln hom 2013" = lm(log(`valor-2013`) ~ treated, data = df_rdd |> filter(`valor-2013` != 0)),
     "ln hom 2014" = lm(log(`valor-2014`) ~ treated, data = df_rdd |> filter(`valor-2014` != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/reg_hom_1.tex"))
```

```{r}
list("ln hom 2015" = lm(log(`valor-2015`) ~ treated, data = df_rdd |> filter(`valor-2015` != 0)),
     "ln hom 2016" = lm(log(`valor-2016`) ~ treated, data = df_rdd |> filter(`valor-2016` != 0)),
     "ln hom 2017" = lm(log(`valor-2017`) ~ treated, data = df_rdd |> filter(`valor-2017` != 0)),
     "ln hom 2018" = lm(log(`valor-2018`) ~ treated, data = df_rdd |> filter(`valor-2018` != 0)),
     "ln hom 2019" = lm(log(`valor-2019`) ~ treated, data = df_rdd |> filter(`valor-2019` != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/reg_hom_2.tex"))
```

```{r}
list("ln hom 2010" = lm(log(`valor-2010`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2010` != 0)),
     "ln hom 2011" = lm(log(`valor-2011`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2011` != 0)),
     "ln hom 2012" = lm(log(`valor-2012`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2012` != 0)),
     "ln hom 2013" = lm(log(`valor-2013`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2013` != 0)),
     "ln hom 2014" = lm(log(`valor-2014`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2014` != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/reg_hom_3.tex"))
```

```{r}
list("ln hom 2015" = lm(log(`valor-2015`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2015` != 0)),
     "ln hom 2016" = lm(log(`valor-2016`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2016` != 0)),
     "ln hom 2017" = lm(log(`valor-2017`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2017` != 0)),
     "ln hom 2018" = lm(log(`valor-2018`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2018` != 0)),
     "ln hom 2019" = lm(log(`valor-2019`) ~ treated+abbrev_state, data = df_rdd |> filter(`valor-2019` != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/reg_hom_4.tex"))
```

# Outros crimes

## Gráficos

### Histograma

```{r}
# Criar histogramas para cada ano
outros_crimes_long <- df_rdd %>% 
  filter(name_muni != "Cruzmaltina" & name_muni != "Flórida") |> 
  select(code_muni, groups, feminicidio_pc:tentativa_hom_pc) %>%
  pivot_longer(cols = feminicidio_pc:tentativa_hom_pc, names_to = "crime", values_to = "taxa_100mil")

ggplot(outros_crimes_long, aes(x = taxa_100mil, fill = groups)) +
  geom_histogram(position = 'identity', bins = 30, alpha = 0.5, color = "gray30") +
  facet_wrap(~ crime, scales = "free_x") +
  scale_fill_viridis_d(option = "C") +
  ggtitle("Distribuição das taxas de outros crimes em 2019") +
  theme_minimal() +
  labs(x = "Taxa", y = "Frequência", fill = "Grupo")

ggsave(file.path(output, "figures/histog_outros.jpg"), width = 16, units = "cm", dpi = 600)
```

### Boxplot

```{r}
ggplot(outros_crimes_long, aes(x = crime, y = taxa_100mil, fill = groups)) +
  geom_boxplot(alpha = 0.5) +
  scale_fill_viridis_d(option = "C", name = "Grupo") +
  ggtitle("Comparação das taxas de outros crimes em 2019 por Grupo") +
  theme_minimal() +
  labs(x = "Ano", y = "Taxa", fill = "Grupo")

ggsave(file.path(output, "figures/boxplot_outros.jpg"), width = 16, units = "cm", dpi = 600)
```
```{r}
df_rdd |> 
  mutate(feminicidio_pc = ifelse(feminicidio_pc == 0, NA, feminicidio_pc)) |> 
  mutate(hom_doloso_pc = ifelse(hom_doloso_pc == 0, NA, hom_doloso_pc)) |> 
  mutate(lesao_pc = ifelse(lesao_pc == 0, NA, lesao_pc)) |> 
  mutate(mandado_pc = ifelse(mandado_pc == 0, NA, mandado_pc)) |> 
  mutate(transito_pc = ifelse(transito_pc == 0, NA, transito_pc)) |> 
  mutate(esclarecer_pc = ifelse(esclarecer_pc == 0, NA, esclarecer_pc)) |> 
  mutate(latrocinio_pc = ifelse(latrocinio_pc == 0, NA, latrocinio_pc)) |> 
  mutate(tentativa_hom_pc = ifelse(tentativa_hom_pc == 0, NA, tentativa_hom_pc)) |> 
  filter(name_muni != "Cruzmaltina" & name_muni != "Flórida") |> 
  select(code_muni, groups, feminicidio_pc:tentativa_hom_pc) %>%
  pivot_longer(cols = feminicidio_pc:tentativa_hom_pc, names_to = "crime", values_to = "taxa_100mil") |> 
  ggplot(aes(x = taxa_100mil, fill = groups)) +
  geom_histogram(position = 'identity', bins = 30, alpha = 0.5, color = "gray30") +
  facet_wrap(~ crime, scales = "free_x") +
  scale_fill_viridis_d(option = "C") +
  ggtitle("Distribuição das taxas de outros crimes em 2019") +
  theme_minimal() +
  labs(x = "Taxa", y = "Frequência", fill = "Grupo")

ggsave(file.path(output, "figures/histog_outros_nonzero.jpg"), width = 16, units = "cm", dpi = 600)
```


```{r}
df_rdd %>% 
  mutate(feminicidio_pc = ifelse(feminicidio_pc == 0, NA, feminicidio_pc)) |> 
  mutate(hom_doloso_pc = ifelse(hom_doloso_pc == 0, NA, hom_doloso_pc)) |> 
  mutate(lesao_pc = ifelse(lesao_pc == 0, NA, lesao_pc)) |> 
  mutate(mandado_pc = ifelse(mandado_pc == 0, NA, mandado_pc)) |> 
  mutate(transito_pc = ifelse(transito_pc == 0, NA, transito_pc)) |> 
  mutate(esclarecer_pc = ifelse(esclarecer_pc == 0, NA, esclarecer_pc)) |> 
  mutate(latrocinio_pc = ifelse(latrocinio_pc == 0, NA, latrocinio_pc)) |> 
  mutate(tentativa_hom_pc = ifelse(tentativa_hom_pc == 0, NA, tentativa_hom_pc)) |> 
  filter(name_muni != "Cruzmaltina" & name_muni != "Flórida") |> 
  select(code_muni, groups, feminicidio_pc:tentativa_hom_pc) %>%
  pivot_longer(cols = feminicidio_pc:tentativa_hom_pc, names_to = "crime", values_to = "taxa_100mil") |>
  ggplot(aes(x = crime, y = taxa_100mil, fill = groups)) +
  geom_boxplot(alpha = 0.5) +
  scale_fill_viridis_d(option = "C", name = "Grupo") +
  ggtitle("Comparação das taxas de outros crimes em 2019 por Grupo") +
  theme_minimal() +
  labs(x = "Ano", y = "Taxa", fill = "Grupo")

ggsave(file.path(output, "figures/boxplot_outros_nonzero.jpg"), width = 16, units = "cm", dpi = 600)

```

### Mapas

```{r}

# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`feminicidio_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de Feminicídios por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_feminicídios.jpg"), width = 16, units = "cm", dpi = 600)

```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`hom_doloso_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de Homicídios dolosos por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_hom_dolosos.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`lesao_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de Lesão Corporal seguida de morte por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_lesao.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`mandado_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de cumprimentos de Mandados de Prisão por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_mandados.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`transito_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de mortes do trânsito por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_transito.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`esclarecer_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de mortes a esclarecer por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_esclarecer.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`latrocinio_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de Latrocínios por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_latrocinios.jpg"), width = 16, units = "cm", dpi = 600)
```

```{r}
# Criar um mapa para um ano específico, por exemplo, 2019
ggplot(df_rdd |> filter(name_muni != "Cruzmaltina" & name_muni != "Flórida")) +
  geom_sf(aes(fill = log(`tentativa_hom_pc`),colour = groups)) +
  scale_colour_viridis_d(option = "C", na.value = "grey90", alpha = 0.3, name = "Grupo") +
  scale_fill_viridis_c(option = "plasma", na.value = "grey90", name = "Log Qtde por 100 mil hab") +
  ggtitle("Número de tentativas de homicídio por Município em 2019") +
  theme_minimal() +
  theme(legend.position = "right")

ggsave(file.path(output, "figures/mapa_tentativas.jpg"), width = 16, units = "cm", dpi = 600)
```

## Regressões

```{r}
list("ln feminicidio" = lm(log(feminicidio_pc) ~ treated, data = df_rdd |> filter(feminicidio_pc != 0)),
     "ln hom doloso" = lm(log(hom_doloso_pc) ~ treated, data = df_rdd |> filter(hom_doloso_pc != 0)),
     "ln lesao" = lm(log(lesao_pc) ~ treated, data = df_rdd |> filter(lesao_pc != 0)),
     "ln mandado" = lm(log(mandado_pc) ~ treated, data = df_rdd |> filter(mandado_pc != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/outros_crimes_1.tex"))
```

```{r}
list("ln transito" = lm(log(transito_pc) ~ treated, data = df_rdd |> filter(transito_pc != 0)),
     "ln esclarecer" = lm(log(esclarecer_pc) ~ treated, data = df_rdd |> filter(esclarecer_pc != 0)),
     "ln latrocinio" = lm(log(latrocinio_pc) ~ treated, data = df_rdd |> filter(latrocinio_pc != 0)),
     "ln tentativa" = lm(log(tentativa_hom_pc) ~ treated, data = df_rdd |> filter(tentativa_hom_pc != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/outros_crimes_2.tex"))
```

```{r}
list("ln feminicidio" = lm(log(feminicidio_pc) ~ treated+abbrev_state, data = df_rdd |> filter(feminicidio_pc != 0)),
     "ln hom doloso" = lm(log(hom_doloso_pc) ~ treated+abbrev_state, data = df_rdd |> filter(hom_doloso_pc != 0)),
     "ln lesao" = lm(log(lesao_pc) ~ treated+abbrev_state, data = df_rdd |> filter(lesao_pc != 0)),
     "ln mandado" = lm(log(mandado_pc) ~ treated+abbrev_state, data = df_rdd |> filter(mandado_pc != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/outros_crimes_3.tex"))
```

```{r}
list("ln transito" = lm(log(transito_pc) ~ treated+abbrev_state, data = df_rdd |> filter(transito_pc != 0)),
     "ln esclarecer" = lm(log(esclarecer_pc) ~ treated+abbrev_state, data = df_rdd |> filter(esclarecer_pc != 0)),
     "ln latrocinio" = lm(log(latrocinio_pc) ~ treated+abbrev_state, data = df_rdd |> filter(latrocinio_pc != 0)),
     "ln tentativa" = lm(log(tentativa_hom_pc) ~ treated+abbrev_state, data = df_rdd |> filter(tentativa_hom_pc != 0))) %>%
  modelsummary(stars = T, output = file.path(output, "tables/outros_crimes_4.tex"))
```

# Modelo Logit/Probit

```{r}
df_rdd3 <- df_rdd |> 
  mutate(`valor-2010` = ifelse(`valor-2010` > 0, TRUE, FALSE),
         `valor-2011` = ifelse(`valor-2011` > 0, TRUE, FALSE),
         `valor-2012` = ifelse(`valor-2012` > 0, TRUE, FALSE),
         `valor-2013` = ifelse(`valor-2013` > 0, TRUE, FALSE),
         `valor-2014` = ifelse(`valor-2014` > 0, TRUE, FALSE),
         `valor-2015` = ifelse(`valor-2015` > 0, TRUE, FALSE),
         `valor-2016` = ifelse(`valor-2016` > 0, TRUE, FALSE),
         `valor-2017` = ifelse(`valor-2017` > 0, TRUE, FALSE),
         `valor-2018` = ifelse(`valor-2018` > 0, TRUE, FALSE),
         `valor-2019` = ifelse(`valor-2019` > 0, TRUE, FALSE),
         feminicidio_pc = ifelse(feminicidio_pc > 0, TRUE, FALSE),
         hom_doloso_pc = ifelse(hom_doloso_pc > 0, TRUE, FALSE),
         lesao_pc = ifelse(lesao_pc > 0, TRUE, FALSE),
         mandado_pc = ifelse(mandado_pc > 0, TRUE, FALSE),
         transito_pc = ifelse(transito_pc > 0, TRUE, FALSE),
         esclarecer_pc = ifelse(esclarecer_pc > 0, TRUE, FALSE),
         tentativa_hom_pc = ifelse(tentativa_hom_pc > 0, TRUE, FALSE),
         latrocinio_pc = ifelse(latrocinio_pc > 0, TRUE, FALSE),)

```

```{r}
list("logit hom 2010" = glm(`valor-2010` ~ treated, data = df_rdd3, family = (binomial)),
     "logit hom 2011" = glm(`valor-2011` ~ treated, data = df_rdd3, family = (binomial)),
     "logit hom 2012" = glm(`valor-2012` ~ treated, data = df_rdd3, family = (binomial)),
     "logit hom 2013" = glm(`valor-2013` ~ treated, data = df_rdd3, family = (binomial)),
     "logit hom 2014" = glm(`valor-2014` ~ treated, data = df_rdd3, family = (binomial))) %>%
  modelsummary(stars = T)
```

```{r}
logitmfx(`valor-2019` ~ treated + abbrev_state, data = df_rdd3)
logitmfx(feminicidio_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(hom_doloso_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(lesao_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(mandado_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(transito_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(esclarecer_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(tentativa_hom_pc ~ treated + abbrev_state, data = df_rdd3)
logitmfx(latrocinio_pc ~ treated + abbrev_state, data = df_rdd3)

```


